{
  "type": "object",
  "properties": {
    "mNavigationGenerationRadius": {
      "description": "How big navmesh do we want to generate",
      "type": "number"
    },
    "mNavigationRemovalRadius": {
      "description": "Navigation outside this radius will be removed",
      "type": "number"
    },
    "mArachnophobiaModeMaterials": {
      "description": "Materials that may be used on arachnids",
      "type": "array",
      "items": {}
    },
    "mIsArachnid": {
      "description": "Is creature considered an arachnid",
      "type": "boolean"
    },
    "mIsEnabled": {
      "$ref": "#/definitions/EEnabled",
      "description": "True if optimized by the AI system"
    },
    "mItemToDrop": {
      "description": "Class of item to drop when dead",
      "type": "object",
      "properties": {
        "package": {
          "type": "string"
        },
        "name": {
          "type": "string"
        }
      },
      "required": [
        "name",
        "package"
      ]
    },
    "mSpline": {
      "$ref": "#/definitions/AFGSplinePath",
      "description": "Spline we are set to follow"
    },
    "mRotationDoneDelegate": {
      "description": "Called when we are done with rotation movement"
    },
    "mMoveSpeedData": {
      "description": "Array with information about different speeds that this creature can use",
      "type": "array",
      "items": {
        "$ref": "#/definitions/FMoveSpeedPair"
      }
    },
    "mShouldOptimizeMeshWhenVisible": {
      "description": "Indicates if we should optimize this creatures mesh ( disable ticking ) when looking at it from a distance ( not good on large creatures )",
      "type": "boolean"
    },
    "mIsPersistent": {
      "description": "Should this creature be able to persist in the world",
      "type": "boolean"
    },
    "mActualAIControllerClass": {
      "description": "We specify our own controller class because we need to delay the spawning. Set this instead of \"AIControllerClass",
      "type": "object",
      "properties": {
        "package": {
          "type": "string"
        },
        "name": {
          "type": "string"
        }
      },
      "required": [
        "name",
        "package"
      ]
    },
    "mRotationTimerHandle": {
      "description": "Timer handle used when rotating the pawn with our custom rotate movement"
    },
    "mTargetRotation": {
      "description": "Target rotation for custom rotate movement"
    },
    "mCanSpawnDuringDay": {
      "description": "Can creatures spawn during day?",
      "type": "boolean"
    },
    "mCanSpawnDuringNight": {
      "description": "Can creatures spawn during night?",
      "type": "boolean"
    },
    "mMoveDuringRotation": {
      "description": "Used in combination with BTT_RotateToTarget if we need the creature to move while rotating",
      "type": "boolean"
    },
    "mRotationSpeedMultiplier": {
      "description": "Scale value for input vector when rotating and moving",
      "type": "number"
    },
    "mEyeLocationComponent": {
      "description": "Component used to determine eye location for a creature"
    },
    "mArachnophobia_Sprite": {
      "description": "Sprite for the arachnophobia mode"
    },
    "mArachnophobia_Material": {
      "description": "Material for the arachnophobia mode"
    },
    "mArachnophobia_Particle": {
      "description": "Particle for the arachnophobia mode"
    },
    "mDayTimePctCountAsNight": {
      "description": "How much of day time percentage ( 0.0 - 1.0 ) should count towards night time",
      "type": "number"
    },
    "mOwningSpawner": {
      "$ref": "#/definitions/AFGCreatureSpawner",
      "description": "Reference to the spawner that handles this creature"
    },
    "mFeetNames": {
      "description": "When receiving FootDown on index 2, then we will trace from mFeetNames[2] socket for ground",
      "type": "array",
      "items": {
        "type": "string"
      }
    },
    "mDefaultFootstepEffect": {
      "$ref": "#/definitions/FFootstepEffect",
      "description": "Default effects to play when a foot hits the ground when the material doesn't exist in mFootstepEffects"
    },
    "mFootstepEffect": {
      "description": "Effects to play when a foot hits the ground",
      "type": "array",
      "items": {
        "$ref": "#/definitions/FFootstepEffectSurface"
      }
    },
    "mFootstepAudioEvents": {
      "description": "Audio event to play (where index in array is the feet index passed from AnimNotify_FootDown)",
      "type": "array",
      "items": {}
    },
    "mMaxFootstepParticleSpawnDistance": {
      "description": "Maximum distance we want to play footstep particles at",
      "type": "number"
    },
    "mMaxFootstepDecalSpawnDistance": {
      "description": "Maximum distance we want to spawn footsteps decals at",
      "type": "number"
    },
    "mFootstepDecalSize": {
      "description": "Size of footstep decals",
      "type": "array",
      "items": {
        "$ref": "#/definitions/Vector"
      }
    },
    "mFootstepDecalLifetime": {
      "description": "Lifetime of footstep decals",
      "type": "number"
    },
    "mHealthComponent": {
      "$ref": "#/definitions/UFGHealthComponent",
      "description": "Keeps track of our current health"
    },
    "mFallDamageCurve": {
      "description": "How much damage to take falling with a given velocity"
    },
    "mFallDamageCurveOverride": {
      "description": "Overrides the default fall damage curve, utilized by Equipment"
    },
    "mFallDamageDamageType": {
      "description": "Reference to a class.",
      "type": "object",
      "properties": {
        "package": {
          "type": "string"
        },
        "name": {
          "type": "string"
        }
      },
      "required": [
        "name",
        "package"
      ]
    },
    "mMaxDeathStayTime": {
      "description": "The maximum time after death (in seconds) the pawn will stay in the world, so it will be removed even if it's in sight after this time",
      "type": "number"
    },
    "mDeathRemoveCheckTime": {
      "description": "How often will we check if the pawn is in sight of any player",
      "type": "number"
    },
    "mEnemyTargetDesirability": {
      "description": "Multiplier for targeting desirability",
      "type": "number"
    },
    "mTakeDamageSound": {
      "description": "Sound played when pawn takes damage"
    },
    "mDeathSound": {
      "description": "Sound played when pawn dies"
    },
    "mLandEvent": {
      "description": "Event posted when landing"
    },
    "mTakeDamageParticle": {
      "description": "Particle for when pawn takes damage"
    },
    "mMinVehiclePushVelocityForRagdoll": {
      "description": "Min push velocity required to start ragdoll",
      "type": "number"
    },
    "mTimeToGetUpFromRagdoll": {
      "description": "time in seconds until character gets up from ragdoll if alive",
      "type": "number"
    },
    "mMaxDistanceMovedToGetUp": {
      "description": "the furthest distance we can move during ragdoll before we are considered still enough to stand up from ragdoll",
      "type": "number"
    },
    "mIsRagdolled": {
      "description": "true if ragdolled",
      "type": "boolean"
    },
    "mRagdollMeshLoc": {
      "$ref": "#/definitions/Vector"
    },
    "mRagdollMeshVelocity": {
      "$ref": "#/definitions/Vector"
    },
    "mRagdollMeshLocBoneName": {
      "description": "Name of the bone we take mesh location from",
      "type": "string"
    },
    "mRagdollMeshPhysicsBoneName": {
      "description": "Name of the bone we take physics velocity from",
      "type": "string"
    },
    "mSyncBodyMaxDistance": {
      "description": "A floating point number.",
      "type": "number"
    },
    "mApplyDamageMomentum": {
      "description": "Should the auto momentum be applied when taking damage?",
      "type": "boolean"
    },
    "mIgnoredDamageTypes": {
      "description": "Damage types that this character is immune to",
      "type": "array",
      "items": {
        "type": "object",
        "properties": {
          "package": {
            "type": "string"
          },
          "name": {
            "type": "string"
          }
        },
        "required": [
          "name",
          "package"
        ]
      }
    },
    "mWeakspotMultiplier": {
      "description": "How much more damage should be dealt when taking a weakspot hit",
      "type": "number"
    },
    "mWeakspotBoneNames": {
      "description": "Bone names that result in a weakspot hit",
      "type": "array",
      "items": {
        "type": "string"
      }
    },
    "mNormalDamageMultiplier": {
      "description": "Multiplier for this creature and normal damage taken",
      "type": "number"
    },
    "mIsPossessed": {
      "description": "Used to let client know when a pawn gets possessed/unpossessed",
      "type": "boolean"
    }
  },
  "required": [
    "mActualAIControllerClass",
    "mApplyDamageMomentum",
    "mArachnophobiaModeMaterials",
    "mArachnophobia_Material",
    "mArachnophobia_Particle",
    "mArachnophobia_Sprite",
    "mCanSpawnDuringDay",
    "mCanSpawnDuringNight",
    "mDayTimePctCountAsNight",
    "mDeathRemoveCheckTime",
    "mDeathSound",
    "mDefaultFootstepEffect",
    "mEnemyTargetDesirability",
    "mEyeLocationComponent",
    "mFallDamageCurve",
    "mFallDamageCurveOverride",
    "mFallDamageDamageType",
    "mFeetNames",
    "mFootstepAudioEvents",
    "mFootstepDecalLifetime",
    "mFootstepDecalSize",
    "mFootstepEffect",
    "mHealthComponent",
    "mIgnoredDamageTypes",
    "mIsArachnid",
    "mIsEnabled",
    "mIsPersistent",
    "mIsPossessed",
    "mIsRagdolled",
    "mItemToDrop",
    "mLandEvent",
    "mMaxDeathStayTime",
    "mMaxDistanceMovedToGetUp",
    "mMaxFootstepDecalSpawnDistance",
    "mMaxFootstepParticleSpawnDistance",
    "mMinVehiclePushVelocityForRagdoll",
    "mMoveDuringRotation",
    "mMoveSpeedData",
    "mNavigationGenerationRadius",
    "mNavigationRemovalRadius",
    "mNormalDamageMultiplier",
    "mOwningSpawner",
    "mRagdollMeshLoc",
    "mRagdollMeshLocBoneName",
    "mRagdollMeshPhysicsBoneName",
    "mRagdollMeshVelocity",
    "mRotationDoneDelegate",
    "mRotationSpeedMultiplier",
    "mRotationTimerHandle",
    "mShouldOptimizeMeshWhenVisible",
    "mSpline",
    "mSyncBodyMaxDistance",
    "mTakeDamageParticle",
    "mTakeDamageSound",
    "mTargetRotation",
    "mTimeToGetUpFromRagdoll",
    "mWeakspotBoneNames",
    "mWeakspotMultiplier"
  ]
}