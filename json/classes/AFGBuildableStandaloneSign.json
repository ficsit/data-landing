{
  "type": "object",
  "properties": {
    "mDataToComponentMap": {
      "$ref": "#/definitions/Map<number,any>",
      "description": "Map of Element Ids to their associated component"
    },
    "mSignDisplayRoot": {
      "description": "Root Component that holds all the sign elements, text, mesh etc."
    },
    "mTextDisplayRoot": {
      "description": "Root component that parents the text objects"
    },
    "mMeshComponentProxy": {
      "$ref": "#/definitions/UFGColoredInstanceMeshProxy"
    },
    "mBoundingBox": {
      "description": "Bounding box used to cull text mesh. Is assign to the BoundedTextRenderComponents"
    },
    "mGridSquareDimensions": {
      "description": "The size of each grid square on the this sign"
    },
    "mHologramParticleComponent": {
      "description": "Particle system visual"
    },
    "mGainSignificanceDistance": {
      "description": "Distance at which to gain significance",
      "type": "number"
    },
    "mSignConstraints": {
      "$ref": "#/definitions/FSignElementConstraints"
    },
    "mSignFont": {
      "description": "An unknown type (likely an Unreal Engine or plugin type)."
    },
    "mBackgroundGridSize": {
      "description": "An 32-bit signed integer.",
      "type": "number"
    },
    "mSignData": {
      "$ref": "#/definitions/FSignData"
    },
    "mHologramClass": {
      "$ref": "#/definitions/classReference<AFGHologram>",
      "description": "The hologram class to use for constructing this object."
    },
    "mDisplayName": {
      "$ref": "#/definitions/localized",
      "description": "The human readable display name of this object."
    },
    "mDescription": {
      "$ref": "#/definitions/localized",
      "description": "The human readable description of this object."
    },
    "MaxRenderDistance": {
      "description": "Max draw distance, inactive when < 0",
      "type": "number"
    },
    "mHighlightVector": {
      "$ref": "#/definitions/Vector",
      "description": "Vector used to determine highlight effects location"
    },
    "mFactoryTickFunction": {
      "$ref": "#/definitions/FFactoryTickFunction",
      "description": "Controls if we should receive Factory_Tick and how frequent."
    },
    "mMaterialNameToInstanceManager": {
      "$ref": "#/definitions/Map<string,UFGFactoryMaterialInstanceManager>",
      "description": "Map of colorable mesh materials to their respective colored factory material instance manager"
    },
    "mBlockSharingMaterialInstanceMapping": {
      "type": "boolean"
    },
    "mExcludeFromMaterialInstancing": {
      "description": "Array of mesh elements to selectively block material instancing on. Used in the event that certain buildable components should not attempt to use a shared material instance.",
      "type": "array",
      "items": {}
    },
    "mPrimaryColor": {
      "$ref": "#/definitions/LinearColor",
      "description": "The primary color of this buildable"
    },
    "mSecondaryColor": {
      "$ref": "#/definitions/LinearColor",
      "description": "The primary color of this buildable"
    },
    "mColorSlot": {
      "description": "The color slot of this buildable",
      "type": "number"
    },
    "mBuildEffectTemplate": {
      "$ref": "#/definitions/classReference<UFGMaterialEffect_Build>",
      "description": "What build effect to use when building this building"
    },
    "mDismantleEffectTemplate": {
      "$ref": "#/definitions/classReference<UFGMaterialEffect_Build>",
      "description": "What build effect to use when dismantling this building"
    },
    "mActiveBuildEffect": {
      "$ref": "#/definitions/UFGMaterialEffect_Build",
      "description": "Store the active effect so we can cancel an old one if we need to start a new."
    },
    "mBuildEffectInstignator": {
      "$ref": "#/definitions/AActor",
      "description": "Used to sync and start build effect on buildings when created, but not after creation. Set's to true when creating a building, turns off in the construction effect finish play.\n[DavalliusA:Mon/01-04-2019] this is sett to null in default. If it's non null, we expect the build effects need to play."
    },
    "mDismantleEffectClassName": {
      "description": "Name read from config"
    },
    "mBuildEffectClassName": {
      "description": "Name read from config"
    },
    "mSkipBuildEffect": {
      "description": "Skip the build effect.",
      "type": "boolean"
    },
    "mBuildEffectSpeed": {
      "description": "Build effect speed, a constant speed (distance over time) that the build effect should have, so bigger buildings take longer",
      "type": "number"
    },
    "mForceNetUpdateOnRegisterPlayer": {
      "description": "Whether or not this building should use ForceNetUpdate() when a player registers/unregisters from it.",
      "type": "boolean"
    },
    "mHighlightParticleClassName": {
      "description": "Name read from config"
    },
    "mHighlightParticleSystemTemplate": {
      "$ref": "#/definitions/UParticleSystem",
      "description": "Particle system component"
    },
    "mHighlightParticleSystemComponent": {
      "description": "Particle system component"
    },
    "mDidFirstTimeUse": {
      "description": "If this building should show highlight before first use, save when it has been shown",
      "type": "boolean"
    },
    "mShouldShowHighlight": {
      "description": "Should we show highlight when building this building",
      "type": "boolean"
    },
    "mAllowCleranceSeparationEvenIfStackedOn": {
      "type": "boolean"
    },
    "mCameraDistanceSq": {
      "description": "Squared distance to closest camera",
      "type": "number"
    },
    "mBuildingID": {
      "description": "The building ID this belongs to.",
      "type": "number"
    },
    "mInteractWidgetClass": {
      "$ref": "#/definitions/classReference<UFGInteractWidget>",
      "description": "The widget that will present our UI."
    },
    "mInteractingPlayers": {
      "description": "Players interacting with this building",
      "type": "array",
      "items": {
        "$ref": "#/definitions/AFGCharacterPlayer"
      }
    },
    "mIsUseable": {
      "description": "If you can interact with this buildable.",
      "type": "number"
    },
    "mNetConstructionID": {
      "$ref": "#/definitions/FNetConstructionID",
      "description": "ID given from server when constructed. Has not been assigned a value by server if 0."
    },
    "mBuiltWithRecipe": {
      "$ref": "#/definitions/classReference<UFGRecipe>",
      "description": "Recipe this building was built with, e.g. used for refunds and stats."
    },
    "mBuildTimeStamp": {
      "description": "Time when this building was built",
      "type": "number"
    },
    "mCachedShapeComponent": {
      "description": "Caching the shape component once we have gotten it"
    },
    "mHideOnBuildEffectStart": {
      "description": "Should the building start as hidden when playing the build effect",
      "type": "boolean"
    }
  },
  "required": [
    "MaxRenderDistance",
    "mActiveBuildEffect",
    "mAllowCleranceSeparationEvenIfStackedOn",
    "mBackgroundGridSize",
    "mBlockSharingMaterialInstanceMapping",
    "mBoundingBox",
    "mBuildEffectClassName",
    "mBuildEffectInstignator",
    "mBuildEffectSpeed",
    "mBuildEffectTemplate",
    "mBuildTimeStamp",
    "mBuildingID",
    "mBuiltWithRecipe",
    "mCachedShapeComponent",
    "mCameraDistanceSq",
    "mColorSlot",
    "mDataToComponentMap",
    "mDescription",
    "mDidFirstTimeUse",
    "mDismantleEffectClassName",
    "mDismantleEffectTemplate",
    "mDisplayName",
    "mExcludeFromMaterialInstancing",
    "mFactoryTickFunction",
    "mForceNetUpdateOnRegisterPlayer",
    "mGainSignificanceDistance",
    "mGridSquareDimensions",
    "mHideOnBuildEffectStart",
    "mHighlightParticleClassName",
    "mHighlightParticleSystemComponent",
    "mHighlightParticleSystemTemplate",
    "mHighlightVector",
    "mHologramClass",
    "mHologramParticleComponent",
    "mInteractWidgetClass",
    "mInteractingPlayers",
    "mIsUseable",
    "mMaterialNameToInstanceManager",
    "mMeshComponentProxy",
    "mNetConstructionID",
    "mPrimaryColor",
    "mSecondaryColor",
    "mShouldShowHighlight",
    "mSignConstraints",
    "mSignData",
    "mSignDisplayRoot",
    "mSignFont",
    "mSkipBuildEffect",
    "mTextDisplayRoot"
  ]
}