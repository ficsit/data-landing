{
  "description": "Base for conveyor lifts.",
  "type": "object",
  "properties": {
    "mMeshHeight": {
      "description": "What's the height of the meshes used.",
      "type": "number"
    },
    "mBottomMesh": {
      "$ref": "#/definitions/UStaticMesh",
      "description": "Mesh at the bottom of the lift."
    },
    "mMidMesh": {
      "$ref": "#/definitions/UStaticMesh",
      "description": "Mesh repeated for the mid section."
    },
    "mTopMesh": {
      "$ref": "#/definitions/UStaticMesh",
      "description": "Mesh at the top of the lift."
    },
    "mBellowMesh": {
      "$ref": "#/definitions/UStaticMesh",
      "description": "Mesh placed on the input/output as a bellow between a wall or factory."
    },
    "mJointMesh": {
      "$ref": "#/definitions/UStaticMesh",
      "description": "Mesh placed between two joined lift sections."
    },
    "mShelfMesh": {
      "$ref": "#/definitions/UStaticMesh",
      "description": "Shelf placed under each item."
    },
    "mTopTransform": {
      "description": "An unknown type (likely an Unreal Engine or plugin type)."
    },
    "mIsReversed": {
      "type": "boolean"
    },
    "mItemMeshMap": {
      "$ref": "#/definitions/Map<string,any>",
      "description": "Meshes for items."
    },
    "PresistentConveyorPackagingDataObject": {
      "$ref": "#/definitions/UPresistentConveyorPackagingData",
      "description": "held here, but created by conveyors when replicated, as we don't want to create it unless it's used."
    },
    "mSpeed": {
      "description": "Speed of this conveyor.",
      "type": "number"
    },
    "mItems": {
      "$ref": "#/definitions/FConveyorBeltItems",
      "description": "All the locally simulated resource offsets on the conveyor belt."
    },
    "mConnection0": {
      "description": "First connection on conveyor belt, Connections are always in the same order, mConnection0 is the input, mConnection1 is the output."
    },
    "mConnection1": {
      "description": "Second connection on conveyor belt"
    },
    "mHologramClass": {
      "$ref": "#/definitions/classReference<AFGHologram>",
      "description": "The hologram class to use for constructing this object."
    },
    "mDisplayName": {
      "$ref": "#/definitions/localized",
      "description": "The human readable display name of this object."
    },
    "mDescription": {
      "$ref": "#/definitions/localized",
      "description": "The human readable description of this object."
    },
    "MaxRenderDistance": {
      "description": "Max draw distance, inactive when < 0",
      "type": "number"
    },
    "mHighlightVector": {
      "$ref": "#/definitions/Vector",
      "description": "Vector used to determine highlight effects location"
    },
    "mFactoryTickFunction": {
      "$ref": "#/definitions/FFactoryTickFunction",
      "description": "Controls if we should receive Factory_Tick and how frequent."
    },
    "mMaterialNameToInstanceManager": {
      "$ref": "#/definitions/Map<string,UFGFactoryMaterialInstanceManager>",
      "description": "Map of colorable mesh materials to their respective colored factory material instance manager"
    },
    "mPrimaryColor": {
      "$ref": "#/definitions/LinearColor",
      "description": "The primary color of this buildable"
    },
    "mSecondaryColor": {
      "$ref": "#/definitions/LinearColor",
      "description": "The primary color of this buildable"
    },
    "mColorSlot": {
      "description": "The color slot of this buildable",
      "type": "number"
    },
    "mBuildEffectTemplate": {
      "$ref": "#/definitions/classReference<UFGMaterialEffect_Build>",
      "description": "What build effect to use when building this building"
    },
    "mDismantleEffectTemplate": {
      "$ref": "#/definitions/classReference<UFGMaterialEffect_Build>",
      "description": "What build effect to use when dismantling this building"
    },
    "mBuildEffectInstignator": {
      "$ref": "#/definitions/AActor",
      "description": "Used to sync and start build effect on buildings when created, but not after creation. Set's to true when creating a building, turns off in the construction effect finish play.\n[DavalliusA:Mon/01-04-2019] this is sett to null in default. If it's non null, we expect the build effects need to play."
    },
    "mDismantleEffectClassName": {
      "description": "Name read from config"
    },
    "mBuildEffectClassName": {
      "description": "Name read from config"
    },
    "mSkipBuildEffect": {
      "description": "Skip the build effect.",
      "type": "boolean"
    },
    "mBuildEffectSpeed": {
      "description": "Build effect speed, a constant speed (distance over time) that the build effect should have, so bigger buildings take longer",
      "type": "number"
    },
    "mForceNetUpdateOnRegisterPlayer": {
      "description": "Whether or not this building should use ForceNetUpdate() when a player registers/unregisters from it.",
      "type": "boolean"
    },
    "mHighlightParticleClassName": {
      "description": "Name read from config"
    },
    "mHighlightParticleSystemTemplate": {
      "$ref": "#/definitions/UParticleSystem",
      "description": "Particle system component"
    },
    "mHighlightParticleSystemComponent": {
      "description": "Particle system component"
    },
    "mDidFirstTimeUse": {
      "description": "If this building should show highlight before first use, save when it has been shown",
      "type": "boolean"
    },
    "mShouldShowHighlight": {
      "description": "Should we show highlight when building this building",
      "type": "boolean"
    },
    "mAllowCleranceSeparationEvenIfStackedOn": {
      "type": "boolean"
    },
    "mCameraDistanceSq": {
      "description": "Squared distance to closest camera",
      "type": "number"
    },
    "mBuildingID": {
      "description": "The building ID this belongs to.",
      "type": "number"
    },
    "mInteractWidgetClass": {
      "$ref": "#/definitions/classReference<UFGInteractWidget>",
      "description": "The widget that will present our UI."
    },
    "mInteractingPlayers": {
      "description": "Players interacting with this building",
      "type": "array",
      "items": {
        "$ref": "#/definitions/AFGCharacterPlayer"
      }
    },
    "mIsUseable": {
      "description": "If you can interact with this buildable.",
      "type": "number"
    },
    "mNetConstructionID": {
      "$ref": "#/definitions/FNetConstructionID",
      "description": "ID given from server when constructed. Has not been assigned a value by server if 0."
    },
    "mBuiltWithRecipe": {
      "$ref": "#/definitions/classReference<UFGRecipe>",
      "description": "Recipe this building was built with, e.g. used for refunds and stats."
    },
    "mBuildTimeStamp": {
      "description": "Time when this building was built",
      "type": "number"
    },
    "mCachedShapeComponent": {
      "description": "Caching the shape component once we have gotten it"
    }
  },
  "required": [
    "MaxRenderDistance",
    "PresistentConveyorPackagingDataObject",
    "mAllowCleranceSeparationEvenIfStackedOn",
    "mBellowMesh",
    "mBottomMesh",
    "mBuildEffectClassName",
    "mBuildEffectInstignator",
    "mBuildEffectSpeed",
    "mBuildEffectTemplate",
    "mBuildTimeStamp",
    "mBuildingID",
    "mBuiltWithRecipe",
    "mCachedShapeComponent",
    "mCameraDistanceSq",
    "mColorSlot",
    "mConnection0",
    "mConnection1",
    "mDescription",
    "mDidFirstTimeUse",
    "mDismantleEffectClassName",
    "mDismantleEffectTemplate",
    "mDisplayName",
    "mFactoryTickFunction",
    "mForceNetUpdateOnRegisterPlayer",
    "mHighlightParticleClassName",
    "mHighlightParticleSystemComponent",
    "mHighlightParticleSystemTemplate",
    "mHighlightVector",
    "mHologramClass",
    "mInteractWidgetClass",
    "mInteractingPlayers",
    "mIsReversed",
    "mIsUseable",
    "mItemMeshMap",
    "mItems",
    "mJointMesh",
    "mMaterialNameToInstanceManager",
    "mMeshHeight",
    "mMidMesh",
    "mNetConstructionID",
    "mPrimaryColor",
    "mSecondaryColor",
    "mShelfMesh",
    "mShouldShowHighlight",
    "mSkipBuildEffect",
    "mSpeed",
    "mTopMesh",
    "mTopTransform"
  ]
}