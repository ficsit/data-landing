{
  "type": "object",
  "properties": {
    "mBaseTurnRate": {
      "description": "Base turn rate, in deg/sec. Other scaling may affect final turn rate.",
      "type": "number"
    },
    "mBaseLookUpRate": {
      "description": "Base look up/down rate, in deg/sec. Other scaling may affect final rate.",
      "type": "number"
    },
    "mMesh1PAnimClass": {
      "$ref": "#/definitions/classReference<any>",
      "description": "The default arms animation when we're idle."
    },
    "mMesh3P": {
      "description": "Pawn mesh: 3rd person view"
    },
    "mFoliagePickupProxyClass": {
      "$ref": "#/definitions/classReference<AFGFoliagePickup>",
      "description": "As we have no foliage actor to actually put pickup code in, we use this actor as a proxy"
    },
    "mFoliagePickupProxy": {
      "$ref": "#/definitions/AFGFoliagePickup",
      "description": "Actor that's used when trying to pickup foliage"
    },
    "mBuildGun": {
      "$ref": "#/definitions/AFGBuildGun",
      "description": "This is the infamous build gun."
    },
    "mResourceScanner": {
      "$ref": "#/definitions/AFGResourceScanner",
      "description": "Reference to the resource scanner"
    },
    "mResourceMiner": {
      "$ref": "#/definitions/AFGResourceMiner",
      "description": "Reference to the resource miner"
    },
    "mBestUsableActor": {
      "$ref": "#/definitions/AActor",
      "description": "The best usable actor nearby."
    },
    "mCachedUseState": {
      "$ref": "#/definitions/FUseState",
      "description": "Of the usable actor we are looking at, UPROPERTY to prevent the AdditionalData to be garbage collected"
    },
    "mAnimInstanceClass": {
      "$ref": "#/definitions/classReference<any>",
      "description": "Anim instance class to use in third person"
    },
    "mAnimInstanceClass1P": {
      "$ref": "#/definitions/classReference<any>",
      "description": "Anim instance class to use in first person"
    },
    "mReviveDuration": {
      "description": "time (in seconds) it takes to revive a fellow player",
      "type": "number"
    },
    "mStartingResources": {
      "description": "The starting resources for the player",
      "type": "array",
      "items": {
        "$ref": "#/definitions/FItemAmount"
      }
    },
    "mStartingResourceForTesting": {
      "description": "The starting resources for the player if we are NOT in shipping",
      "type": "array",
      "items": {
        "$ref": "#/definitions/FItemAmount"
      }
    },
    "mDrownDamageDamageType": {
      "$ref": "#/definitions/classReference<UFGDamageType>"
    },
    "mDrownDamage": {
      "description": "The amount of damage to receive when drowning.",
      "type": "number"
    },
    "mDrownDamageInterval": {
      "description": "Time between each application of drowning damage (in seconds)",
      "type": "number"
    },
    "mPlayerToRevive": {
      "$ref": "#/definitions/AFGCharacterPlayer",
      "description": "The player that we are reviving"
    },
    "mPickupToCollect": {
      "$ref": "#/definitions/AFGItemPickup",
      "description": "The pickup we are collecting"
    },
    "m1PDefaultFootstepEffect": {
      "$ref": "#/definitions/FFootstepEffect",
      "description": "Default effects to play when a foot hits the ground when the material doesn't exist in m1PFootstepEffect"
    },
    "m1PFootstepEffect": {
      "description": "Effects to play when a foot hits the ground in first person",
      "type": "array",
      "items": {
        "$ref": "#/definitions/FFootstepEffectSurface"
      }
    },
    "m1PFootstepEvent": {
      "description": "Effects to play when a foot hits the ground in first person",
      "type": "array",
      "items": {
        "$ref": "#/definitions/UAkAudioEvent"
      }
    },
    "mLastSafeGroundPositions": {
      "$ref": "#/definitions/Vector",
      "description": "latest safe ground location positions"
    },
    "mLastSafeGroundPositionLoopHead": {
      "description": "used for knowing which is the latest written safe ground position",
      "type": "number"
    },
    "mCameraComponent": {
      "description": "Player camera"
    },
    "mSpringArmComponent": {
      "description": "Spring arm for camera"
    },
    "mActiveEquipments": {
      "description": "This is the equipment we hold in our hands.",
      "type": "array",
      "items": {
        "$ref": "#/definitions/AFGEquipment"
      }
    },
    "mClientActiveEquipments": {
      "description": "Simulated on the client so they know what to unequip.",
      "type": "array",
      "items": {
        "$ref": "#/definitions/AFGEquipment"
      }
    },
    "mAllAttachments": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/AFGEquipmentAttachment"
      }
    },
    "mActiveAttachments": {
      "description": "Remote client representation of the equipment",
      "type": "array",
      "items": {
        "$ref": "#/definitions/AFGEquipmentAttachment"
      }
    },
    "mCurrentCameraMode": {
      "$ref": "#/definitions/ECameraMode",
      "description": "Current camera mode for the character"
    },
    "mPlayerPreferredCameraMode": {
      "$ref": "#/definitions/ECameraMode",
      "description": "What camera mode were we in before we opened the"
    },
    "mInventory": {
      "$ref": "#/definitions/UFGInventoryComponent",
      "description": "The players inventory."
    },
    "mAllowedResourceFormsInInventory": {
      "description": "The resource forms that are allowed in players inventory.",
      "type": "array",
      "items": {
        "$ref": "#/definitions/EResourceForm"
      }
    },
    "mBeltSlot": {
      "$ref": "#/definitions/UFGInventoryComponentBeltSlot",
      "description": "The belt slot inventory."
    },
    "mTrashSlot": {
      "$ref": "#/definitions/UFGInventoryComponent",
      "description": "The players inventory."
    },
    "mAllowCameraToggling": {
      "description": "Allow toggling of camera modes",
      "type": "boolean"
    },
    "mUseDistance": {
      "description": "Maximum distance we use objects on",
      "type": "number"
    },
    "mPickupCounter": {
      "description": "Counter used for replicating to remote clients when something is picked up",
      "type": "number"
    },
    "mReviver": {
      "$ref": "#/definitions/AFGCharacterPlayer",
      "description": "The player that is reviving me"
    },
    "mDefaultWalkHeadBobShake": {
      "$ref": "#/definitions/classReference<any>",
      "description": "Reference to the default walk head bob shake"
    },
    "mDefaultSprintHeadBobShake": {
      "$ref": "#/definitions/classReference<any>",
      "description": "Reference to the default sprint head bob shake"
    },
    "mDrivenVehicle": {
      "$ref": "#/definitions/AFGDriveablePawn",
      "description": "Vehicle currently driven by pawn."
    },
    "mSavedDrivenVehicle": {
      "$ref": "#/definitions/AFGDriveablePawn"
    },
    "mOutlineComponent": {
      "$ref": "#/definitions/UFGOutlineComponent"
    },
    "mHealthGenerationThreshold": {
      "description": "Health Generation",
      "type": "number"
    },
    "mHealthGenerationAmount": {
      "description": "A floating point number.",
      "type": "number"
    },
    "mHealthGenerationInterval": {
      "description": "A floating point number.",
      "type": "number"
    },
    "mHealthGenerationWaitTime": {
      "description": "A floating point number.",
      "type": "number"
    },
    "mRadiationIntensity": {
      "description": "The accumulated normalized radiation intensity of the players current location",
      "type": "number"
    },
    "mRadiationDamageAngle": {
      "description": "The angle from the players view to the accumulated radiation damage",
      "type": "number"
    },
    "mRadiationImmunity": {
      "description": "How much immunity do we have for radiation",
      "type": "number"
    },
    "mInRadioactiveZone": {
      "description": "Are we in a radioactive zone",
      "type": "boolean"
    },
    "mCameraOffsetBlendSpeed": {
      "description": "How fast the blend is",
      "type": "number"
    },
    "mReplicatedIsSliding": {
      "description": "Replicated value of sliding status. Used to let non owning player know whats happening",
      "type": "boolean"
    },
    "mCrouchSpeed": {
      "description": "How fast the blend is for crouch and slide",
      "type": "number"
    },
    "mStandSpeed": {
      "description": "How fast the blend is from crouch/slide to stand",
      "type": "number"
    },
    "mSlideToCrouchSpeed": {
      "description": "How fast the blend is from slide to crouch",
      "type": "number"
    },
    "mNoUpdate": {
      "type": "boolean"
    },
    "mFeetNames": {
      "description": "When receiving FootDown on index 2, then we will trace from mFeetNames[2] socket for ground",
      "type": "array",
      "items": {
        "type": "string"
      }
    },
    "mDefaultFootstepEffect": {
      "$ref": "#/definitions/FFootstepEffect",
      "description": "Default effects to play when a foot hits the ground when the material doesn't exist in mFootstepEffects"
    },
    "mFootstepEffect": {
      "description": "Effects to play when a foot hits the ground",
      "type": "array",
      "items": {
        "$ref": "#/definitions/FFootstepEffectSurface"
      }
    },
    "mFootstepAudioEvents": {
      "description": "Audio event to play (where index in array is the feet index passed from AnimNotify_FootDown)",
      "type": "array",
      "items": {
        "$ref": "#/definitions/UAkAudioEvent"
      }
    },
    "mMaxFootstepParticleSpawnDistance": {
      "description": "Maximum distance we want to play footstep particles at",
      "type": "number"
    },
    "mMaxFootstepDecalSpawnDistance": {
      "description": "Maximum distance we want to spawn footsteps decals at",
      "type": "number"
    },
    "mFootstepDecalSize": {
      "description": "Size of footstep decals",
      "type": "array",
      "items": {
        "$ref": "#/definitions/Vector"
      }
    },
    "mFootstepDecalLifetime": {
      "description": "Lifetime of footstep decals",
      "type": "number"
    },
    "mHealthComponent": {
      "$ref": "#/definitions/UFGHealthComponent",
      "description": "Keeps track of our current health"
    },
    "mFallDamageCurve": {
      "description": "How much damage to take falling with a given velocity"
    },
    "mFallDamageCurveOverride": {
      "description": "Overrides the default fall damage curve, utilized by Equipment"
    },
    "mFallDamageDamageType": {
      "$ref": "#/definitions/classReference<UFGDamageType>"
    },
    "mMaxDeathStayTime": {
      "description": "The maximum time after death (in seconds) the pawn will stay in the world, so it will be removed even if it's in sight after this time",
      "type": "number"
    },
    "mDeathRemoveCheckTime": {
      "description": "How often will we check if the pawn is in sight of any player",
      "type": "number"
    },
    "mEnemyTargetDesirability": {
      "description": "Multiplier for targeting desirability",
      "type": "number"
    },
    "mTakeDamageSound": {
      "$ref": "#/definitions/UAkAudioEvent",
      "description": "Sound played when pawn takes damage"
    },
    "mDeathSound": {
      "$ref": "#/definitions/UAkAudioEvent",
      "description": "Sound played when pawn dies"
    },
    "mLandEvent": {
      "$ref": "#/definitions/UAkAudioEvent",
      "description": "Event posted when landing"
    },
    "mTakeDamageParticle": {
      "$ref": "#/definitions/UParticleSystem",
      "description": "Particle for when pawn takes damage"
    },
    "mMinVehiclePushVelocityForRagdoll": {
      "description": "Min push velocity required to start ragdoll",
      "type": "number"
    },
    "mTimeToGetUpFromRagdoll": {
      "description": "time in seconds until character gets up from ragdoll if alive",
      "type": "number"
    },
    "mMaxDistanceMovedToGetUp": {
      "description": "the furthest distance we can move during ragdoll before we are considered still enough to stand up from ragdoll",
      "type": "number"
    },
    "mIsRagdolled": {
      "description": "true if ragdolled",
      "type": "boolean"
    },
    "mRagdollMeshLoc": {
      "$ref": "#/definitions/Vector"
    },
    "mRagdollMeshVelocity": {
      "$ref": "#/definitions/Vector"
    },
    "mRagdollMeshLocBoneName": {
      "description": "Name of the bone we take mesh location from",
      "type": "string"
    },
    "mRagdollMeshPhysicsBoneName": {
      "description": "Name of the bone we take physics velocity from",
      "type": "string"
    },
    "mSyncBodyMaxDistance": {
      "description": "A floating point number.",
      "type": "number"
    },
    "mApplyDamageMomentum": {
      "description": "Should the auto momentum be applied when taking damage?",
      "type": "boolean"
    },
    "mIgnoredDamageTypes": {
      "description": "Damage types that this character is immune to",
      "type": "array",
      "items": {
        "$ref": "#/definitions/classReference<any>"
      }
    },
    "mWeakspotMultiplier": {
      "description": "How much more damage should be dealt when taking a weakspot hit",
      "type": "number"
    },
    "mWeakspotBoneNames": {
      "description": "Bone names that result in a weakspot hit",
      "type": "array",
      "items": {
        "type": "string"
      }
    },
    "mNormalDamageMultiplier": {
      "description": "Multiplier for this creature and normal damage taken",
      "type": "number"
    },
    "mIsPossessed": {
      "description": "Used to let client know when a pawn gets possessed/unpossessed",
      "type": "boolean"
    }
  },
  "required": [
    "m1PDefaultFootstepEffect",
    "m1PFootstepEffect",
    "m1PFootstepEvent",
    "mActiveAttachments",
    "mActiveEquipments",
    "mAllAttachments",
    "mAllowCameraToggling",
    "mAllowedResourceFormsInInventory",
    "mAnimInstanceClass",
    "mAnimInstanceClass1P",
    "mApplyDamageMomentum",
    "mBaseLookUpRate",
    "mBaseTurnRate",
    "mBeltSlot",
    "mBestUsableActor",
    "mBuildGun",
    "mCachedUseState",
    "mCameraComponent",
    "mCameraOffsetBlendSpeed",
    "mClientActiveEquipments",
    "mCrouchSpeed",
    "mCurrentCameraMode",
    "mDeathRemoveCheckTime",
    "mDeathSound",
    "mDefaultFootstepEffect",
    "mDefaultSprintHeadBobShake",
    "mDefaultWalkHeadBobShake",
    "mDrivenVehicle",
    "mDrownDamage",
    "mDrownDamageDamageType",
    "mDrownDamageInterval",
    "mEnemyTargetDesirability",
    "mFallDamageCurve",
    "mFallDamageCurveOverride",
    "mFallDamageDamageType",
    "mFeetNames",
    "mFoliagePickupProxy",
    "mFoliagePickupProxyClass",
    "mFootstepAudioEvents",
    "mFootstepDecalLifetime",
    "mFootstepDecalSize",
    "mFootstepEffect",
    "mHealthComponent",
    "mHealthGenerationAmount",
    "mHealthGenerationInterval",
    "mHealthGenerationThreshold",
    "mHealthGenerationWaitTime",
    "mIgnoredDamageTypes",
    "mInRadioactiveZone",
    "mInventory",
    "mIsPossessed",
    "mIsRagdolled",
    "mLandEvent",
    "mLastSafeGroundPositionLoopHead",
    "mLastSafeGroundPositions",
    "mMaxDeathStayTime",
    "mMaxDistanceMovedToGetUp",
    "mMaxFootstepDecalSpawnDistance",
    "mMaxFootstepParticleSpawnDistance",
    "mMesh1PAnimClass",
    "mMesh3P",
    "mMinVehiclePushVelocityForRagdoll",
    "mNoUpdate",
    "mNormalDamageMultiplier",
    "mOutlineComponent",
    "mPickupCounter",
    "mPickupToCollect",
    "mPlayerPreferredCameraMode",
    "mPlayerToRevive",
    "mRadiationDamageAngle",
    "mRadiationImmunity",
    "mRadiationIntensity",
    "mRagdollMeshLoc",
    "mRagdollMeshLocBoneName",
    "mRagdollMeshPhysicsBoneName",
    "mRagdollMeshVelocity",
    "mReplicatedIsSliding",
    "mResourceMiner",
    "mResourceScanner",
    "mReviveDuration",
    "mReviver",
    "mSavedDrivenVehicle",
    "mSlideToCrouchSpeed",
    "mSpringArmComponent",
    "mStandSpeed",
    "mStartingResourceForTesting",
    "mStartingResources",
    "mSyncBodyMaxDistance",
    "mTakeDamageParticle",
    "mTakeDamageSound",
    "mTimeToGetUpFromRagdoll",
    "mTrashSlot",
    "mUseDistance",
    "mWeakspotBoneNames",
    "mWeakspotMultiplier"
  ]
}