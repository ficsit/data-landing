{
  "type": "object",
  "properties": {
    "mControlledConnection": {
      "$ref": "#/definitions/UFGRailroadTrackConnectionComponent",
      "description": "Connection we control."
    },
    "mSwitchPosition": {
      "description": "Current switch position read from the controlled connection, polled each tick.",
      "type": "number"
    },
    "mPowerConsumption": {
      "description": "Power consumption of this factory.",
      "type": "number"
    },
    "mPowerConsumptionExponent": {
      "description": "A floating point number.",
      "type": "number"
    },
    "mPowerInfoClass": {
      "$ref": "#/definitions/classReference<UFGPowerInfoComponent>",
      "description": "Class to use for the power simulation on this factory, this is only used if the building has any FGPowerConnectionComponent attached."
    },
    "mPowerInfo": {
      "$ref": "#/definitions/UFGPowerInfoComponent",
      "description": "Power simulation info"
    },
    "mOnHasPowerChanged": {
      "description": "So that you can listen for when power has changed"
    },
    "mOnHasProductionChanged": {
      "description": "So that you can listen for when production has changed"
    },
    "mMinimumProducingTime": {
      "description": "A floating point number.",
      "type": "number"
    },
    "mMinimumStoppedTime": {
      "description": "A floating point number.",
      "type": "number"
    },
    "mTimeSinceStartStopProducing": {
      "description": "A floating point number.",
      "type": "number"
    },
    "mNumCyclesForProductivity": {
      "description": "How many cycles back do we base the productivity on",
      "type": "number"
    },
    "mCanChangePotential": {
      "description": "Set this to true if we want this building to be able to change the production rate potential with the \"Slider of Potential\"",
      "type": "boolean"
    },
    "mCurrentPotential": {
      "description": "This is the current potential (overclock, overcharge) of this factory [0..N]",
      "type": "number"
    },
    "mPendingPotential": {
      "description": "When ever a production cycle is completed we set the current potential to this value",
      "type": "number"
    },
    "mMinPotential": {
      "description": "You can never set the potential to less than this when playing",
      "type": "number"
    },
    "mMaxPotential": {
      "description": "You can never set the potential to more than this when playing",
      "type": "number"
    },
    "mMaxPotentialIncreasePerCrystal": {
      "description": "When the player adds another crystal in the inventory we unlock even more potential",
      "type": "number"
    },
    "mFluidStackSizeDefault": {
      "$ref": "#/definitions/EStackSize",
      "description": "Item stack size Enum to use as base for how much fluid a Liquid / Gas Item descriptor can be stored on an index in an inventory"
    },
    "mFluidStackSizeMultiplier": {
      "description": "Scalar for multiplying the default Stack Size for Fluid Inventory Slots ( 1 is default. 2 == 2\n  FluidStackSize )",
      "type": "number"
    },
    "mIsProductionPaused": {
      "description": "The player is able to toggle if production should be paused or not",
      "type": "boolean"
    },
    "mReplicationDetailActor": {
      "$ref": "#/definitions/AFGReplicationDetailActor"
    },
    "OnReplicationDetailActorCreatedEvent": {
      "description": "Event for when ReplicationDetailActors are created. Will only be dispatched if this buildable inherits from the ReplicationDetailActorOwnerInterface."
    },
    "mInventoryPotential": {
      "$ref": "#/definitions/UFGInventoryComponent",
      "description": "The input we place a crystal in to unlock the potential"
    },
    "mSignificanceBias": {
      "description": "A bias to the significance value",
      "type": "number"
    },
    "mEffectUpdateInterval": {
      "description": "How often effect update should update",
      "type": "number"
    },
    "mCurrentProductivity": {
      "description": "A replicated compressed version of the productivity",
      "type": "number"
    },
    "mIsProducing": {
      "description": "Are we producing? Do not set this manually, some delegates and other stuff might not get triggered then.",
      "type": "number"
    },
    "mHasPower": {
      "description": "If building has power, for more details about the circuitry see mPowerInfo.",
      "type": "number"
    },
    "mAddToSignificanceManager": {
      "description": "Indicates if the factory should be handled by significance manager",
      "type": "number"
    },
    "mSignificanceRange": {
      "description": "The range to keep the factory in significance",
      "type": "number"
    },
    "mHologramClass": {
      "$ref": "#/definitions/classReference<AFGHologram>",
      "description": "The hologram class to use for constructing this object."
    },
    "mDisplayName": {
      "$ref": "#/definitions/localized",
      "description": "The human readable display name of this object."
    },
    "mDescription": {
      "$ref": "#/definitions/localized",
      "description": "The human readable description of this object."
    },
    "MaxRenderDistance": {
      "description": "Max draw distance, inactive when < 0",
      "type": "number"
    },
    "mHighlightVector": {
      "$ref": "#/definitions/Vector",
      "description": "Vector used to determine highlight effects location"
    },
    "mFactoryTickFunction": {
      "$ref": "#/definitions/FFactoryTickFunction",
      "description": "Controls if we should receive Factory_Tick and how frequent."
    },
    "mMaterialNameToInstanceManager": {
      "$ref": "#/definitions/Map<string,UFGFactoryMaterialInstanceManager>",
      "description": "Map of colorable mesh materials to their respective colored factory material instance manager"
    },
    "mPrimaryColor": {
      "$ref": "#/definitions/LinearColor",
      "description": "The primary color of this buildable"
    },
    "mSecondaryColor": {
      "$ref": "#/definitions/LinearColor",
      "description": "The primary color of this buildable"
    },
    "mColorSlot": {
      "description": "The color slot of this buildable",
      "type": "number"
    },
    "mBuildEffectTemplate": {
      "$ref": "#/definitions/classReference<UFGMaterialEffect_Build>",
      "description": "What build effect to use when building this building"
    },
    "mDismantleEffectTemplate": {
      "$ref": "#/definitions/classReference<UFGMaterialEffect_Build>",
      "description": "What build effect to use when dismantling this building"
    },
    "mBuildEffectInstignator": {
      "$ref": "#/definitions/AActor",
      "description": "Used to sync and start build effect on buildings when created, but not after creation. Set's to true when creating a building, turns off in the construction effect finish play.\n[DavalliusA:Mon/01-04-2019] this is sett to null in default. If it's non null, we expect the build effects need to play."
    },
    "mDismantleEffectClassName": {
      "description": "Name read from config"
    },
    "mBuildEffectClassName": {
      "description": "Name read from config"
    },
    "mSkipBuildEffect": {
      "description": "Skip the build effect.",
      "type": "boolean"
    },
    "mBuildEffectSpeed": {
      "description": "Build effect speed, a constant speed (distance over time) that the build effect should have, so bigger buildings take longer",
      "type": "number"
    },
    "mForceNetUpdateOnRegisterPlayer": {
      "description": "Whether or not this building should use ForceNetUpdate() when a player registers/unregisters from it.",
      "type": "boolean"
    },
    "mHighlightParticleClassName": {
      "description": "Name read from config"
    },
    "mHighlightParticleSystemTemplate": {
      "$ref": "#/definitions/UParticleSystem",
      "description": "Particle system component"
    },
    "mHighlightParticleSystemComponent": {
      "description": "Particle system component"
    },
    "mDidFirstTimeUse": {
      "description": "If this building should show highlight before first use, save when it has been shown",
      "type": "boolean"
    },
    "mShouldShowHighlight": {
      "description": "Should we show highlight when building this building",
      "type": "boolean"
    },
    "mAllowCleranceSeparationEvenIfStackedOn": {
      "type": "boolean"
    },
    "mCameraDistanceSq": {
      "description": "Squared distance to closest camera",
      "type": "number"
    },
    "mBuildingID": {
      "description": "The building ID this belongs to.",
      "type": "number"
    },
    "mInteractWidgetClass": {
      "$ref": "#/definitions/classReference<UFGInteractWidget>",
      "description": "The widget that will present our UI."
    },
    "mInteractingPlayers": {
      "description": "Players interacting with this building",
      "type": "array",
      "items": {
        "$ref": "#/definitions/AFGCharacterPlayer"
      }
    },
    "mIsUseable": {
      "description": "If you can interact with this buildable.",
      "type": "number"
    },
    "mNetConstructionID": {
      "$ref": "#/definitions/FNetConstructionID",
      "description": "ID given from server when constructed. Has not been assigned a value by server if 0."
    },
    "mBuiltWithRecipe": {
      "$ref": "#/definitions/classReference<UFGRecipe>",
      "description": "Recipe this building was built with, e.g. used for refunds and stats."
    },
    "mBuildTimeStamp": {
      "description": "Time when this building was built",
      "type": "number"
    },
    "mCachedShapeComponent": {
      "description": "Caching the shape component once we have gotten it"
    }
  },
  "required": [
    "MaxRenderDistance",
    "OnReplicationDetailActorCreatedEvent",
    "mAddToSignificanceManager",
    "mAllowCleranceSeparationEvenIfStackedOn",
    "mBuildEffectClassName",
    "mBuildEffectInstignator",
    "mBuildEffectSpeed",
    "mBuildEffectTemplate",
    "mBuildTimeStamp",
    "mBuildingID",
    "mBuiltWithRecipe",
    "mCachedShapeComponent",
    "mCameraDistanceSq",
    "mCanChangePotential",
    "mColorSlot",
    "mControlledConnection",
    "mCurrentPotential",
    "mCurrentProductivity",
    "mDescription",
    "mDidFirstTimeUse",
    "mDismantleEffectClassName",
    "mDismantleEffectTemplate",
    "mDisplayName",
    "mEffectUpdateInterval",
    "mFactoryTickFunction",
    "mFluidStackSizeDefault",
    "mFluidStackSizeMultiplier",
    "mForceNetUpdateOnRegisterPlayer",
    "mHasPower",
    "mHighlightParticleClassName",
    "mHighlightParticleSystemComponent",
    "mHighlightParticleSystemTemplate",
    "mHighlightVector",
    "mHologramClass",
    "mInteractWidgetClass",
    "mInteractingPlayers",
    "mInventoryPotential",
    "mIsProducing",
    "mIsProductionPaused",
    "mIsUseable",
    "mMaterialNameToInstanceManager",
    "mMaxPotential",
    "mMaxPotentialIncreasePerCrystal",
    "mMinPotential",
    "mMinimumProducingTime",
    "mMinimumStoppedTime",
    "mNetConstructionID",
    "mNumCyclesForProductivity",
    "mOnHasPowerChanged",
    "mOnHasProductionChanged",
    "mPendingPotential",
    "mPowerConsumption",
    "mPowerConsumptionExponent",
    "mPowerInfo",
    "mPowerInfoClass",
    "mPrimaryColor",
    "mReplicationDetailActor",
    "mSecondaryColor",
    "mShouldShowHighlight",
    "mSignificanceBias",
    "mSignificanceRange",
    "mSkipBuildEffect",
    "mSwitchPosition",
    "mTimeSinceStartStopProducing"
  ]
}