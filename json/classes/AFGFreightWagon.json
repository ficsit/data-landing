{
  "type": "object",
  "properties": {
    "mFreightCargoType": {
      "$ref": "#/definitions/EFreightCargoType",
      "description": "The current type of inventory this freight is holding. Default is FCT_Standard."
    },
    "mTransitoryCargoType": {
      "$ref": "#/definitions/EFreightCargoType"
    },
    "mLaunchedCharacters": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/AFGCharacterPlayer"
      }
    },
    "mVehicleMovement": {
      "$ref": "#/definitions/UFGRailroadVehicleMovementComponent",
      "description": "vehicle simulation component"
    },
    "mStorageInventory": {
      "$ref": "#/definitions/UFGInventoryComponent",
      "description": "Responsible for handling our inventory"
    },
    "mContainerMeshStandard": {
      "description": "Static mesh to use when freight is holding standard inventory ( factory items )",
      "type": "object",
      "properties": {
        "package": {
          "type": "string"
        },
        "name": {
          "type": "string"
        }
      },
      "required": [
        "name",
        "package"
      ]
    },
    "mContainerMeshLiquid": {
      "description": "Static mesh to use when freight is holding liquid / gas inventory",
      "type": "object",
      "properties": {
        "package": {
          "type": "string"
        },
        "name": {
          "type": "string"
        }
      },
      "required": [
        "name",
        "package"
      ]
    },
    "mInventorySize": {
      "description": "The size of the inventory for this wagon.",
      "type": "number"
    },
    "mFluidStackSizeDefault": {
      "$ref": "#/definitions/EStackSize",
      "description": "Item stack size Enum to use as base for how much fluid a Liquid / Gas Item descriptor can be stored on an index in an inventory"
    },
    "mFluidStackSizeMultiplier": {
      "description": "The size of the inventory for this wagon.",
      "type": "number"
    },
    "mCargoMeshComponent": {
      "description": "An unknown type (likely an Unreal Engine or plugin type)."
    },
    "mLaunchCharacterScalar": {
      "description": "A floating point number.",
      "type": "number"
    },
    "mCargoOverlapCollision": {
      "description": "An unknown type (likely an Unreal Engine or plugin type)."
    },
    "mTrain": {
      "$ref": "#/definitions/AFGTrain",
      "description": "The train this vehicle is part of, updated from the railroad subsystem"
    },
    "mLength": {
      "description": "How long is this vehicle.",
      "type": "number"
    },
    "mIsOrientationReversed": {
      "description": "If this vehicle is reversed in the train formation.",
      "type": "boolean"
    },
    "mTrackPosition": {
      "$ref": "#/definitions/FRailroadTrackPosition",
      "description": "Where along the track is the train."
    },
    "mDisplayName": {
      "description": "The human readable name for this vehicle.",
      "type": "string"
    },
    "mDescription": {
      "description": "The human readable description for this vehicle.",
      "type": "string"
    },
    "mHologramClass": {
      "description": "Hologram to build this class with.",
      "type": "object",
      "properties": {
        "package": {
          "type": "string"
        },
        "name": {
          "type": "string"
        }
      },
      "required": [
        "name",
        "package"
      ]
    },
    "mMesh": {
      "description": "The main skeletal mesh associated with this Vehicle"
    },
    "mHealthComponent": {
      "$ref": "#/definitions/UFGHealthComponent",
      "description": "Keeps track of our current health"
    },
    "mDisabledByWaterLocations": {
      "description": "If any of these locations enters water, then we are unusable",
      "type": "array",
      "items": {
        "$ref": "#/definitions/Vector"
      }
    },
    "mNetConstructionID": {
      "$ref": "#/definitions/FNetConstructionID",
      "description": "ID given from server when constructed. Has not been assigned a value by server if 0."
    },
    "mBuiltWithRecipe": {
      "description": "Recipe this vehicle was built with, e.g. used for refunds and stats.",
      "type": "object",
      "properties": {
        "package": {
          "type": "string"
        },
        "name": {
          "type": "string"
        }
      },
      "required": [
        "name",
        "package"
      ]
    },
    "mPrimaryColor": {
      "$ref": "#/definitions/LinearColor",
      "description": "The primary color of this buildable"
    },
    "mSecondaryColor": {
      "$ref": "#/definitions/LinearColor",
      "description": "The primary color of this buildable"
    },
    "mIsSelfDriving": {
      "description": "If this vehicle is self driving.",
      "type": "boolean"
    },
    "mSelfDrivingController": {
      "description": "The AI that controls this vehicle when self-driving is activated."
    },
    "mStoredPhysicsData": {
      "description": "Saved like this, as we can't store it in serialize, as it will be killed",
      "type": "array",
      "items": {
        "$ref": "#/definitions/FVehiclePhysicsData"
      }
    },
    "mConstructSound": {
      "description": "Sound played when this vehicle is created"
    },
    "mIsDestructible": {
      "description": "Can this vehicle be destroyed by damage?",
      "type": "number"
    },
    "mIsSubmergedInWater": {
      "description": "If true, then we are submerged in water",
      "type": "number"
    },
    "mSubmergedAngularDamping": {
      "description": "increased angular damping when vehicle is under water",
      "type": "number"
    },
    "mSubmergedLinearDamping": {
      "description": "increased linear damping when vehicle is under water",
      "type": "number"
    },
    "mSubmergedBouyantForce": {
      "description": "upwards force applied to vehicles when underwater",
      "type": "number"
    },
    "mGasDamageType": {
      "description": "Gas damage typ that should be redirected to the driver",
      "type": "object",
      "properties": {
        "package": {
          "type": "string"
        },
        "name": {
          "type": "string"
        }
      },
      "required": [
        "name",
        "package"
      ]
    },
    "mSignificanceBias": {
      "description": "A bias to the significance value",
      "type": "number"
    },
    "mAddToSignificanceManager": {
      "description": "Indicates if the vehicle should be handled by significance manager",
      "type": "number"
    },
    "mSignificanceRange": {
      "description": "Range that this vehicle should be significant within",
      "type": "number"
    },
    "mShouldAttachDriver": {
      "description": "True if the driver should be attached, false if this is a \"remote controlled\" pawn.",
      "type": "boolean"
    },
    "mIsDriverVisible": {
      "description": "True if the driver should be visible, set from FVehicleSeat",
      "type": "boolean"
    },
    "mDriverSeatSocket": {
      "description": "Socket to attach the driver to, if mShouldAttachDriver is true, set from FVehicleSeat",
      "type": "string"
    },
    "mDriverSeatAnimation": {
      "description": "Animation to play on the character player when in the driver seat, set from FVehicleSeat"
    },
    "mDriverExitOffset": {
      "$ref": "#/definitions/Vector",
      "description": "Where to place the driver upon exiting (local space), set from FVehicleSeat"
    },
    "mDriver": {
      "$ref": "#/definitions/AFGCharacterPlayer",
      "description": "The driver, not saved, pawns remember their last driven vehicle and enters it in begin play."
    },
    "mIsDriving": {
      "description": "Is this vehicle being driven.",
      "type": "boolean"
    }
  },
  "required": [
    "mAddToSignificanceManager",
    "mBuiltWithRecipe",
    "mCargoMeshComponent",
    "mCargoOverlapCollision",
    "mConstructSound",
    "mContainerMeshLiquid",
    "mContainerMeshStandard",
    "mDescription",
    "mDisabledByWaterLocations",
    "mDisplayName",
    "mDriver",
    "mDriverExitOffset",
    "mDriverSeatAnimation",
    "mDriverSeatSocket",
    "mFluidStackSizeDefault",
    "mFluidStackSizeMultiplier",
    "mFreightCargoType",
    "mGasDamageType",
    "mHealthComponent",
    "mHologramClass",
    "mInventorySize",
    "mIsDestructible",
    "mIsDriverVisible",
    "mIsDriving",
    "mIsOrientationReversed",
    "mIsSelfDriving",
    "mIsSubmergedInWater",
    "mLaunchCharacterScalar",
    "mLaunchedCharacters",
    "mLength",
    "mMesh",
    "mNetConstructionID",
    "mPrimaryColor",
    "mSecondaryColor",
    "mSelfDrivingController",
    "mShouldAttachDriver",
    "mSignificanceBias",
    "mSignificanceRange",
    "mStorageInventory",
    "mStoredPhysicsData",
    "mSubmergedAngularDamping",
    "mSubmergedBouyantForce",
    "mSubmergedLinearDamping",
    "mTrackPosition",
    "mTrain",
    "mTransitoryCargoType",
    "mVehicleMovement"
  ]
}